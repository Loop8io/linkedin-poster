{
  "name": "LinkedIn Draft - Manual Command",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "linkedin-draft",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Slack Command Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 300],
      "webhookId": "linkedin-draft-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Parse Slack command payload\nconst payload = $input.item.json.body;\n\n// Extract topic from command text\nconst topic = payload.text?.trim() || '';\n\n// Generate post ID: LP-YYYY-MM-DD-manual-N\nconst now = new Date();\nconst dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\nconst timestamp = now.getTime();\nconst postId = `LP-${dateStr}-manual-${timestamp % 10000}`;\n\nreturn {\n  json: {\n    topic: topic,\n    post_id: postId,\n    user_id: payload.user_id,\n    channel_id: payload.channel_id,\n    response_url: payload.response_url,\n    generated_at: now.toISOString()\n  }\n};"
      },
      "id": "parse-command",
      "name": "Parse Command",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "content": "⏳ Generating your LinkedIn post...",
        "respondWith": "text",
        "options": {}
      },
      "id": "initial-response",
      "name": "Send Initial Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT post_text, posted_date FROM writing_samples ORDER BY posted_date DESC LIMIT 5;",
        "options": {}
      },
      "id": "fetch-samples",
      "name": "Fetch Writing Samples",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [680, 400],
      "credentials": {
        "postgres": {
          "id": "XoPBig6C7Dh81i8Y",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare Claude API request\nconst items = $input.all();\nconst commandData = items[0].json;\nconst writingSamples = items.slice(1).map(item => item.json.post_text).join('\\n\\n---\\n\\n');\n\nconst systemPrompt = `You are a LinkedIn content creator writing posts for Ruby Nahal, founder of Loop8.\n\nRuby's Voice & Style:\n- Conversational and candid, not corporate jargon\n- Real-world humor and self-deprecating about tech challenges\n- Story-driven with personal anecdotes\n- Pragmatic and beyond the hype\n- Strategic emoji use (1-2 max per post)\n\nContent Focus:\n- Niche ML use cases with real-world applications\n- GenAI + AWS/GCP solutions\n- AI security & governance\n- Personal journey and behind-the-scenes stories\n- Loop8 client wins and practical automation\n\nBanned Phrases (NEVER use):\n- \"Dive into\", \"Delve into\", \"Unlock\", \"Harness\"\n- \"Revolutionary\", \"Game-changer\", \"Cutting-edge\" (unless ironic)\n- \"In today's fast-paced world\"\n\nPost Structure:\n- Hook: Relatable scenario or question\n- Body: Story or insight with specific examples\n- Value: Takeaway or lesson\n- CTA (optional): Question or thought-provoker\n\nHere are Ruby's recent LinkedIn posts for style reference:\n\n${writingSamples}\n\n---\n\nNow write a LinkedIn post on this topic: ${commandData.topic}\n\nMake it authentic, conversational, and include a real example or story. Keep it under 300 words.`;\n\nreturn {\n  json: {\n    post_id: commandData.post_id,\n    topic: commandData.topic,\n    channel_id: commandData.channel_id,\n    response_url: commandData.response_url,\n    generated_at: commandData.generated_at,\n    claude_request: {\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1024,\n      messages: [\n        {\n          role: \"user\",\n          content: systemPrompt\n        }\n      ]\n    }\n  }\n};"
      },
      "id": "prepare-claude",
      "name": "Prepare Claude Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "specifyBody": "json",
        "jsonBody": "={{ $json.claude_request }}",
        "options": {}
      },
      "id": "claude-api",
      "name": "Call Claude API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 400],
      "credentials": {
        "httpHeaderAuth": {
          "id": "claude-api-key",
          "name": "Claude API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract generated post from Claude response\nconst claudeResponse = $input.item.json;\nconst generatedText = claudeResponse.content[0].text;\n\n// Calculate engagement score (simplified)\nconst hasHook = generatedText.split('\\n')[0].length < 100;\nconst hasStory = generatedText.includes('I ') || generatedText.includes('we ');\nconst hasEmoji = /[\\p{Emoji}]/u.test(generatedText);\nconst hasCTA = generatedText.includes('?');\nconst engagementScore = (hasHook ? 3 : 0) + (hasStory ? 3 : 0) + (hasEmoji ? 2 : 0) + (hasCTA ? 2 : 0);\n\nreturn {\n  json: {\n    post_id: $('Prepare Claude Request').item.json.post_id,\n    topic: $('Prepare Claude Request').item.json.topic,\n    draft_text: generatedText,\n    engagement_score: engagementScore,\n    generated_at: $('Prepare Claude Request').item.json.generated_at,\n    response_url: $('Prepare Claude Request').item.json.response_url\n  }\n};"
      },
      "id": "extract-post",
      "name": "Extract Generated Post",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO linkedin_posts (post_id, source, topic, draft_text, status, engagement_score, generated_at) VALUES ('{{ $json.post_id }}', 'manual', '{{ $json.topic }}', '{{ $json.draft_text }}', 'pending_review', {{ $json.engagement_score }}, '{{ $json.generated_at }}');",
        "options": {}
      },
      "id": "save-to-db",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1560, 400],
      "credentials": {
        "postgres": {
          "id": "XoPBig6C7Dh81i8Y",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.response_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": \"✨ Draft ready!\",\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"✨ *Draft ready!*\"\n      }\n    },\n    {\n      \"type\": \"divider\"\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"{{ $json.draft_text }}\"\n      }\n    },\n    {\n      \"type\": \"divider\"\n    },\n    {\n      \"type\": \"context\",\n      \"elements\": [\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"📊 {{ $json.draft_text.length }} characters | Engagement score: {{ $json.engagement_score }}/10\\n🆔 {{ $json.post_id }}\"\n        }\n      ]\n    },\n    {\n      \"type\": \"actions\",\n      \"elements\": [\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"✅ Approve & Post\"\n          },\n          \"style\": \"primary\",\n          \"action_id\": \"approve_post\",\n          \"value\": \"{{ $json.post_id }}\"\n        },\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"✏️ Refine\"\n          },\n          \"action_id\": \"refine_post\",\n          \"value\": \"{{ $json.post_id }}\"\n        },\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"🔄 Regenerate\"\n          },\n          \"action_id\": \"regenerate_post\",\n          \"value\": \"{{ $json.post_id }}\"\n        },\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"🗑️ Discard\"\n          },\n          \"style\": \"danger\",\n          \"action_id\": \"skip_post\",\n          \"value\": \"{{ $json.post_id }}\"\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "id": "send-to-slack",
      "name": "Send to Slack",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 400]
    }
  ],
  "connections": {
    "Slack Command Webhook": {
      "main": [
        [
          {
            "node": "Parse Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Command": {
      "main": [
        [
          {
            "node": "Send Initial Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Writing Samples",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Writing Samples": {
      "main": [
        [
          {
            "node": "Prepare Claude Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Claude Request": {
      "main": [
        [
          {
            "node": "Call Claude API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude API": {
      "main": [
        [
          {
            "node": "Extract Generated Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Generated Post": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Send to Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}
